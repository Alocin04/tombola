<h1 class="title center-text">TOMBOLA!</h1>
<div class="container">
    <div class="panel center-text mobi-collapse">
        <div class="twelve col">
            <h2 class="center-text">Scegli cartelle</h2>
            <button class="btn btn-fade-link mb-3" data-page="/cartelle/" data-slug="<%= options.fe_opt.room_slug %>">Gioca!</button>
        </div>

        <% options.the_room.cards.forEach((card, index) => { %>

            <div class="four col">
                <table class="table-container single-card selectable card_<%= index %>" data-card="<%= index %>">
                    <tr><td colspan="9">Cartella n°<%= index + 1 %></td></tr>

                    <% for (var i = 0; i < card.content.length; i++) { %>
                        <tr>
                            <% for (var j = 0; j < card.content[i].length; j++) { %>
                                <td><div class="card-number"><%= card.content[i][j] != -1 ? card.content[i][j] : ' ' %></div></td>
                            <% } %>
                        </tr>
                    <% } %>

                </table>
            </div>

        <% }); %>

        <div class="clearfix"></div>
    </div>
    <div class="bottom-links mb-3">
        <a class="link" href="/">&laquo; torna alla pagina principale</a> / 
        <span class="link" id="btnRelase">Rilascia tutte</span>
    </div>
</div> 

<%- '<script>const fe_options = ' + JSON.stringify(options.fe_opt) + '</script>' %>
<script>
    $(document).ready(function() {
        // Inizializzo il timestamp di last_reset
        if (localStorage.getItem('last_reset') === null) {
            localStorage.setItem('last_reset', 100);
        }

        $('.single-card').click(function() {
            if ($(this).hasClass('selectable')) {
                $(this).toggleClass('selected');

                var selected_cards = JSON.parse(localStorage.getItem('selected_cards'));
                if (selected_cards !== null) {
                    if ($(this).hasClass('selected')) {
                        selected_cards.push($(this).data('card'));
                    } else {    
                        selected_cards.splice(selected_cards.indexOf($(this).data('card')), 1);
                    }
                } else {
                    selected_cards = [];
                    if ($(this).hasClass('selected')) {
                        selected_cards.push($(this).data('card'));
                    }
                }
                localStorage.setItem('selected_cards', JSON.stringify(selected_cards));

                $.getJSON('/endpoint/set_used_card/?room_name=' + fe_options.room_slug + '&card_id=' + $(this).data('card') + 
                '&card_sel=' + $(this).hasClass('selected'), function(res) {
                    console.log(res.message);
                });
            }
        });

        $('.btn-fade-link').click(function () {
            const btn = this;
            $('.page').fadeOut(500, function() {
                window.location.href = $(btn).data('page') + $(btn).data('slug');
            });
        });

        $('#btnRelase').click(function() {
            $.getJSON('/endpoint/cards_reset/?room_name=' + fe_options.room_slug, function(res) {
                localStorage.setItem('selected_cards', '[]');
                $('.single-card.selected').removeClass('selected');
                console.log('Sent clear request');
            });
        });

        setInterval(function() {
            $.getJSON('/endpoint/get_used_cards/?room_name=' + fe_options.room_slug, function(res) {
                if (res.status === 'OK') {
                    var selected_cards = JSON.parse(localStorage.getItem('selected_cards'));
                    if (selected_cards === null) selected_cards = [];

                    // Per ogni cartella dal server
                    res.data.cards.forEach((taken, index) => {
                        // Controllo se è stata selezionata dal client (localStorage)
                        if (!selected_cards.includes(index)) {

                            $('.card_' + index).toggleClass('selectable', !taken).toggleClass('disabled', taken);

                            if (!taken) $('.card_' + index).removeClass('selected');
                        } else {
                            if (taken) {
                                $('.card_' + index).addClass('selected');
                            } else {
                                // Svuota il localstorage in caso di reset MA
                                // No buono -> Può generare un desync e bloccare cartelle
                                // localStorage.setItem('selected_cards', '[]');
                            }
                        }
                    });

                    // Controllo se devo resettare il localstorage, basato su timestamp
                    if (localStorage.getItem('last_reset') < res.data.last_reset) {
                        localStorage.setItem('last_reset', res.data.last_reset);
                        localStorage.setItem('selected_cards', '[]');
                        $('.single-card.selected').removeClass('selected');
                        console.log('LocalStorage reset');
                    }
                }

                console.log(res.message);
            });
        }, 500);
    });
</script>